sequenceDiagram
    actor User
    participant Frontend as Frontend App
    participant API as Express API
    participant Controller as AuthController
    participant Service as AuthService
    participant EmailService as EmailService
    participant Crypto as Crypto Module
    participant Redis as Redis Cache
    participant Prisma as Prisma ORM
    participant DB as PostgreSQL

    rect rgb(200, 220, 250)
    Note over User,DB: ÉTAPE 1: Demande de reset
    User->>Frontend: Click "Mot de passe oublié?"
    Frontend->>Frontend: Affiche formulaire email
    User->>Frontend: Saisit email
    Frontend->>API: POST /api/auth/forgot-password
    Note over Frontend,API: Body: { email: "user@example.com" }
    
    API->>Controller: forgotPassword(req, res)
    Controller->>Service: initiatePasswordReset(email)
    
    Service->>Prisma: prisma.customer.findUnique({ where: { email } })
    Prisma->>DB: SELECT * FROM customers WHERE email = ?
    
    alt Email non trouvé
        DB-->>Prisma: null
        Prisma-->>Service: null
        Note over Service: Pour la sécurité, on ne révèle pas que l'email n'existe pas
        Service-->>Controller: Success (fake)
        Controller-->>Frontend: 200 OK
        Frontend-->>User: "Email envoyé si compte existe"
    else Email trouvé
        DB-->>Prisma: Customer data
        Prisma-->>Service: Customer object
        
        Service->>Crypto: randomBytes(32).toString('hex')
        Crypto-->>Service: resetToken (64 chars)
        
        Service->>Crypto: createHash('sha256').update(resetToken)
        Crypto-->>Service: hashedToken
        
        Service->>Redis: SETEX reset:hashedToken 3600 userId
        Note over Redis: Token expire dans 1 heure
        Redis-->>Service: OK
        
        Service->>Prisma: prisma.customer.update({ data: { reset_token_requested_at: NOW() } })
        Note over Service,Prisma: Log de la demande pour rate limiting
        Prisma->>DB: UPDATE customers SET reset_token_requested_at = NOW()
        
        Service->>EmailService: sendPasswordResetEmail(email, resetToken)
        Note over EmailService: URL: https://app.com/reset-password?token={resetToken}
        EmailService->>EmailService: Envoie email via SendGrid
        EmailService-->>Service: Email sent
        
        Service-->>Controller: Success
        Controller-->>Frontend: 200 OK
        Frontend-->>User: "Email envoyé si compte existe"
    end
    end

    rect rgb(250, 220, 200)
    Note over User,DB: ÉTAPE 2: Click sur le lien email
    User->>User: Ouvre email
    User->>Frontend: Click lien reset
    Note over Frontend: URL: /reset-password?token=abc123...
    
    Frontend->>API: GET /api/auth/verify-reset-token?token=abc123...
    API->>Controller: verifyResetToken(req, res)
    Controller->>Service: validateResetToken(token)
    
    Service->>Crypto: createHash('sha256').update(token)
    Crypto-->>Service: hashedToken
    
    Service->>Redis: GET reset:hashedToken
    
    alt Token invalide ou expiré
        Redis-->>Service: null
        Service-->>Controller: InvalidTokenError
        Controller-->>Frontend: 400 Bad Request
        Frontend-->>User: "Lien invalide ou expiré"
    else Token valide
        Redis-->>Service: userId
        Service->>Prisma: prisma.customer.findUnique({ where: { id: userId } })
        Prisma->>DB: SELECT * FROM customers WHERE id = ?
        DB-->>Prisma: Customer
        Prisma-->>Service: Customer object
        
        Service-->>Controller: Token valid
        Controller-->>Frontend: 200 OK
        Frontend-->>User: Affiche formulaire nouveau mot de passe
    end
    end

    rect rgb(220, 250, 220)
    Note over User,DB: ÉTAPE 3: Définir nouveau mot de passe
    User->>Frontend: Saisit nouveau mot de passe
    Frontend->>API: POST /api/auth/reset-password
    Note over Frontend,API: Body: { token, password, confirmPassword }
    
    API->>Controller: resetPassword(req, res)
    Controller->>Service: resetPassword(token, newPassword)
    
    Service->>Service: validatePassword(newPassword)
    Note over Service: Min 8 chars, majuscule, chiffre, symbole
    
    alt Mot de passe faible
        Service-->>Controller: WeakPasswordError
        Controller-->>Frontend: 400 Bad Request
        Frontend-->>User: "Mot de passe trop faible"
    else Mot de passe OK
        Service->>Crypto: createHash('sha256').update(token)
        Crypto-->>Service: hashedToken
        
        Service->>Redis: GET reset:hashedToken
        
        alt Token invalide
            Redis-->>Service: null
            Service-->>Controller: InvalidTokenError
            Controller-->>Frontend: 400 Bad Request
        else Token valide
            Redis-->>Service: userId
            
            Service->>Service: bcrypt.hash(newPassword, 10)
            Service-->>Service: hashedPassword
            
            Service->>Prisma: prisma.$transaction([...])
            Note over Prisma,DB: Transaction START
            
            Prisma->>DB: UPDATE customers SET password = ?, reset_token_requested_at = NULL
            Prisma->>DB: INSERT INTO password_history (customer_id, changed_at)
            Note over DB: Log pour audit
            
            Note over Prisma,DB: Transaction COMMIT
            
            Service->>Redis: DEL reset:hashedToken
            Note over Redis: Invalider le token immédiatement
            Redis-->>Service: OK
            
            Service->>EmailService: sendPasswordChangedConfirmation(email)
            Note over EmailService: Email de sécurité
            EmailService-->>Service: Email sent
            
            Service-->>Controller: Password reset successful
            Controller-->>Frontend: 200 OK
            Frontend-->>User: "Mot de passe modifié avec succès"
            Frontend->>Frontend: Redirect to /login
        end
    end
    end