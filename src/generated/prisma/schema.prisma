generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====

enum CustomerType {
  STANDARD
  SILVER
  GOLD
  PLATINUM
  VIP
}

enum ContactMethod {
  EMAIL
  PHONE
  SMS
  WHATSAPP
}

// === 14/10/25 - Change for String ===
// enum CategoryType {
//   ELECTRONICS
//   CLOTHING
//   BOOKS
//   HOME_APPLIANCES
//   SPORTS
//   OUTDOORS
//   TOYS
//   GAMES
//   FOOD
//   DRINKS
//   HEALTH
//   BEAUTY
//   AUTOMOTIVE
//   INDUSTRIAL
// }

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

// ===== MODELS =====

model Customer {
  id                       Int           @id @default(autoincrement())
  first_name               String
  last_name                String
  date_of_birth            DateTime?
  email                    String        @unique
  password                 String? //Temporary added 15102025 - Schedule splitting Customer AND User session 14 RBAC
  phone_number             String?
  address                  String?
  is_active                Boolean       @default(true)
  last_purchase_date       DateTime?
  total_orders             Int           @default(0)
  total_spent              Float         @default(0)
  customer_type            CustomerType  @default(STANDARD)
  preferred_contact_method ContactMethod @default(EMAIL)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  orders                   Order[]
  reviews                  Review[]

  @@map("customers")
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("brands")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Product {
  id             Int         @id @default(autoincrement())
  name           String
  sku            String      @unique
  imageUrl       String?
  description    String?
  weight         Float?
  price          Float
  stock_quantity Int         @default(0)
  category_id    Int
  brand_id       Int
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  category       Category    @relation(fields: [category_id], references: [id], onDelete: Cascade)
  brand          Brand       @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  orderItems     OrderItem[]
  reviews        Review[]

  @@index([category_id])
  @@index([brand_id])
  @@index([sku])
  @@map("products")
}

model Order {
  id          Int         @id @default(autoincrement())
  customer_id Int
  order_date  DateTime    @default(now())
  status      OrderStatus @default(PENDING)
  total       Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  customer    Customer    @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@index([customer_id])
  @@index([order_date])
  @@map("orders")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Restrict)

  @@index([order_id])
  @@index([product_id])
  @@map("order_items")
}

model Review {
  id          Int      @id @default(autoincrement())
  product_id  Int
  customer_id Int
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  customer    Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@index([product_id])
  @@index([customer_id])
  @@map("reviews")
}
